openapi: 3.0.0
info:
  title: open-api-desc
  version: 1.0.0
  contact:
    name: Real-time Voice/Video API Support
    email: support@zegocloud.com

tags:
  - name: stream-mixing

servers:
  $ref: '../shared-components.yaml#/servers'

paths:
  /:
    post:
      tags:
        - stream-mixing
      summary: StartAutoMix
      description: 指定房间自动将房间内所有音频流进行混流。
      operationId: start-auto-mix
      parameters:
        - name: Action
          in: query
          description: |
            > 接口原型参数
            >
            > https://rtc-api.zego.im?Action=StartAutoMix
          required: true
          schema:
            type: string
            enum: [StartAutoMix]
          style: form
          explode: true
        # 公共参数（Query）
        - $ref: '../shared-components.yaml#/components/parameters/AppId'
        - $ref: '../shared-components.yaml#/components/parameters/SignatureNonce'
        - $ref: '../shared-components.yaml#/components/parameters/Timestamp'
        - $ref: '../shared-components.yaml#/components/parameters/Signature'
        - $ref: '../shared-components.yaml#/components/parameters/SignatureVersion'
        - $ref: '../shared-components.yaml#/components/parameters/IsTest'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartAutoMixRequest'
      responses:
        "200":
          description: 操作成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartAutoMixResponse'

components:
  schemas:
    StartAutoMixRequest:
      type: object
      required: [TaskId, UserId, RoomId, MixOutput]
      properties:
        TaskId: { type: string }
        UserId: { type: string }
        RoomId: { type: string }
        Sequence: { type: integer, format: int32 }
        UserData: { type: string }
        SoundLevel: { type: integer, format: int32, enum: [0,1] }
        ByPass: { type: integer, format: int32, enum: [0,1] }
        SoundChannel: { type: string, enum: ["1","2"] }
        AlignmentType: { type: integer, format: int32, enum: [0,1,2] }
        RecvBufferLevel: { type: integer, format: int32, minimum: 0, maximum: 4000 }
        ExPara:
          type: array
          items:
            type: object
            properties:
              Key: { type: string }
              Value: { type: string }
        ExtraMixInput:
          type: array
          items:
            type: object
            properties:
              StreamId: { type: string }
              StreamUrl: { type: string }
              ModifyType: { type: integer, format: int32, enum: [0,1] }
              SoundLevelId: { type: integer, format: int32 }
              Volume: { type: integer, format: int32 }
        MixOutput:
          type: array
          items:
            type: object
            properties:
              StreamId: { type: string }
              StreamUrl: { type: string }
              AudioCodec: { type: integer, format: int32, enum: [0,1,2,3] }
              AudioBitrate: { type: integer, format: int32 }
              SoundChannel: { type: integer, format: int32, enum: [1,2] }
    StartAutoMixResponse:
      type: object
      properties:
        Code: { type: integer, format: int32 }
        Message: { type: string }
        RequestId: { type: string }
        Data:
          type: object
          properties:
            UserId: { type: string }
            Sequence: { type: integer, format: int32 }
            RoomId: { type: string }
            PlayInfo:
              type: array
              items:
                type: object
                properties:
                  StreamId: { type: string }
                  RTMP: { type: string }
                  HLS: { type: string }
                  FLV: { type: string }

